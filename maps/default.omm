# spencer jackson
# default.omm (Osc to Midi Map)

# this is a highly configurable mapping from OSC messages to MIDI messages and
# back. Each uncommented line follows the form:
#        [OscPath] [ArgTypes], [ArgName1], [ArgName2], ..., [ArgNameN] : [MIDIFUNCTION](args);

# more info is below the actual configuration specified in this file. This  
# mapping works with all the default interfaces that come with control

 # multitouch
/multi/{i} ff, touch,x,y : controlchange( channel, touch, x*127);
/multi/{i} ff, touch,x,y : controlchange( channel, touch+10, y*127);
 # mixer
/pan{i} f, cc,val  : controlchange( channel, cc*4, val*63.5 + 63.5);
/mute{i} i, cc,val : controlchange( channel, cc*4+1, val*127);
/solo{i} i, cc,val : controlchange( channel, cc*4+2, val*127);
/vol{i} f, cc,val  : controlchange( channel, cc*4+3, val*127);
 # DJ
/leftHighCut i, val : controlchange( channel, 1, val);
/leftMidCut i, val : controlchange( channel, 2, val);
/leftLowCut i, val : controlchange( channel, 3, val);
/leftVolume f, val : controlchange( channel, 4, val);
/leftMulti{i} f, indx,val : controlchange( channel, 5+indx, val);
/leftCue i, val : controlchange( channel, 9, val);
/crossfader f, val : controlchange( channel, 10, val);
/crossfader i, val : controlchange( channel, 10, val);
/rightHighCut i, val : controlchange( channel, 11, val);
/rightMidCut i, val : controlchange( channel, 12, val);
/rightLowCut i, val : controlchange( channel, 13, val);
/rightVolume f, val : controlchange( channel, 14, val);
/rightMulti{i} f, indx,val : controlchange( channel, 15+indx, val);
/rightCue i, val : controlchange( channel, 19, val);
 # conways game of life
/life/{i} i, note, val : note( channel, 127-note,velocity, val);
 # monome
/slider{i} f, indx,val : controlchange( channel, indx, val);
/mlr/press iii, x,y,val : note( channel, x*2+54, velocity, val);
/mlr/press iii, x,y,val : note( channel, y*4+48, velocity, val);
 # multibutton
/multi/{i} i, indx,val : note( channel, 108-11*indx/8, 100, val);
 # sequencer
/sliders0/{i} f, step,val : setvelocity( val );
/sliders{i}/{i} f, cc,step,val : controlchange( channel, cc, val);
/grid/{i} i, button,state : note( channel, 84-button/32, velocity, state);
 # accelerometer
/accelerometer fff, x,y,z : controlchange( channel, 1, x);
/accelerometer fff, x,y,z : controlchange( channel, 2, y);
/accelerometer fff, x,y,z : controlchange( channel, 3, z);






# The first thing to note is that you can pass arguments through the OSC message
# path. The character sequence "{i}" indicates an integer in the path. This allows you to 
# map many things quicky. For example rather than type out 127 mappings to include each
# control number, you just pull the index of the controller out of the path. This
# makes the first [ArgName] (i.e. "ctl" above) actually in the path rather than
# lining up with the argument types listed after the path. Only integer types are 
# supported in the path.

# This could of course be accomplished through sending 2 arguments, but doing so
# isn't as simple when designing a Control template. Both ways are fully supported.

# The next thing to note is that "channel" and velocity are keywords and shall not be used
# as OSC argument names. The channel keyword indicates that the global channel set in
# osc2midi through the command line option -c <0-15> will be used in this 
# part of the midi command. This allows easy specification of the channel
# but also great flexibility if one would not like every action to be on the 
# global channel. The keyword velocity can similarly be set with option -vel <0-127>
# This value is only useful for note on and off messages.

# The global channel can be controlled through OSC by mapping an arbitrary
# OSC path to execute the function setchannel() rather than one of the 
# midi functions. The parallel for velopcity is setvelocity()

# Naturally, the global channel or velocity doesn't have to be used at all. You could
# specify these values in each message through an argument or the OSC path. i.e.
#  /m/chan{i}/controlchange{i} i, chan,ctl,val : controlchange(chan,ctl,val);
# or even
#  /supercontroller d f h, ctl,value,grapefruit : controlchange(grapefruit,ctl,value);

# So you see the ordering and naming of the variables is arbitrary. You can also
# do some conditioning of the variables such as in the pitchbend and control
# change examples in the mapping declared by this file. Only the */+- operators
# are supported and only in the form of variable*/const +- const. You cannot
# use arguments to condition other arguemnts, only constants. You can also simply
# have a constant for an argument;

# The important formatting details for each mapping are that the path and argment
# types are separated by a space, the first comma indicates the first argument 
# name (naming the variable in the path or actual OSC argument), second comma 
# for the next argument etc. The comma separates the OSC information from the midi
# information. After the comma must have a valid function name with the correct
# number of arguments. Each mapping must have its own line.

# The full list of supported Midi Functions is as follows:
#  noteon( channel, noteNumber, velocity );
#  noteoff( channel, noteNumber, velocity );
#  note( channel, noteNumber, velocity, state );  # state dictates note on (state != 0) or note off (state == 0)
#  polyaftertouch( channel, noteNumber, pressure );
#  controlchange( channel, controlNumber, value );
#  programchange( channel, programNumber );
#  aftertouch( channel, pressure );
#  pitchbend( channel, value );
#  rawmidi( byte0, byte1, byte2 );  # this sends whater midi message you compose with bytes 0-2
#  midimessage( message );  # this sends a message using the OSC type m which is a pointer to a midi message

# non-Midi functions that operate other system functions are:
#  setchannel( channelNumber );  # set the global channel

# If you make a mapping file that others could find useful please submit it and I
# will add it to the files provided by the project
